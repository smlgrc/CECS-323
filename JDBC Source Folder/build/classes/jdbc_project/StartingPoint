/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jdbc_project;

import java.sql.*;
import java.util.Scanner;

/**
 *
 * @author Sam
 */
public class JDBC_Project 
{
    //  Database credentials
    static String USER;
    static String PASS;
    static String DBNAME;
    //This is the specification for the printout that I'm doing:
    //each % denotes the start of a new field.
    //The - denotes left justification.
    //The number indicates how wide to make the field.
    //The "s" denotes that it's a string.  All of our output in this test are
    //strings, but that won't always be the case.
    
    //static final String displayFormat="%-5s%-15s%-15s%-15s\n";
    static final String displayFormat = "%-30s%-5s\n";
    
// JDBC driver name and database URL
    static final String JDBC_DRIVER = "org.apache.derby.jdbc.ClientDriver";
    static String DB_URL = "jdbc:derby://localhost:1527/";
//            + "testdb;user=";
/**
 * Takes the input string and outputs "N/A" if the string is empty or null.
 * @param input The string to be mapped.
 * @return  Either the input string or "N/A" as appropriate.
 */
    public static String dispNull (String input) 
    {
        //because of short circuiting, if it's null, it never checks the length.
        if (input == null || input.length() == 0)
            return "N/A";
        else
            return input;
    }

    public static void main(String[] args) 
    {
        //Prompt the user for the database name, and the credentials.
        //If your database has no credentials, you can update this code to
        //remove that from the connection string.
        Scanner in = new Scanner(System.in);
        System.out.print("Name of the database (not the user account): ");
        //DBNAME = in.nextLine();
        DBNAME = "JDBC_Project";
        System.out.print("Database user name: ");
        //USER = in.nextLine();
        USER = "";
        System.out.print("Database password: ");
        //PASS = in.nextLine();
        PASS = "";
        //Constructing the database URL connection string
        //DB_URL = DB_URL + DBNAME + ";user="+ USER + ";password=" + PASS;
        DB_URL = DB_URL + DBNAME;
        Connection conn = null; //initialize the connection
        Statement stmt = null;  //initialize the statement that we're using
        try {
            //STEP 2: Register JDBC driver
            Class.forName("org.apache.derby.jdbc.ClientDriver");

            //STEP 3: Open a connection
            System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL);

            //STEP 4: Execute a query
            System.out.println("Creating statement...");
            stmt = conn.createStatement();
            String sql;
            //sql = "SELECT au_id, au_fname, au_lname, phone FROM Authors";
            sql = "SELECT Books.BOOKTITLE, Books.NUMBERPAGES FROM Books WHERE Books.NUMBERPAGES > 400 ORDER BY Books.NUMBERPAGES";
            ResultSet rs = stmt.executeQuery(sql);

            //STEP 5: Extract data from result set
            //System.out.printf(displayFormat, "ID", "First Name", "Last Name", "Phone #");
            System.out.printf(displayFormat, "Book Title", "Number Of Pages");
            while (rs.next()) 
            {
                //Retrieve by column name
                //String id = rs.getString("au_id");
                //String phone = rs.getString("phone");
                //String first = rs.getString("au_fname");
                //String last = rs.getString("au_lname");
                String bookTitle = rs.getString("BOOKTITLE");
                String numberPages = rs.getString("NUMBERPAGES");

                //Display values
                //System.out.printf(displayFormat, dispNull(id), dispNull(first), dispNull(last), dispNull(phone));
                System.out.printf(displayFormat, dispNull(bookTitle), dispNull(numberPages));
                //System.out.println(bookTitle);
                
            }
            //STEP 6: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();
        } 
        catch (SQLException se) 
        {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) 
        {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally 
        {
            //finally block used to close resources
            try 
            {
                if (stmt != null) 
                {
                    stmt.close();
                }
            } 
            catch (SQLException se2) 
            {
                // nothing we can do
            }
            try 
            {
                if (conn != null) 
                {
                    conn.close();
                }
            } 
            catch (SQLException se) 
            {
                se.printStackTrace();
            }//end finally try
        }//end try
        System.out.println("Goodbye!");
    }//end main
}//end FirstExample}


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jdbc_project;

import java.sql.*;
import java.util.Scanner;

/**
 *
 * @author Sam
 */
public class JDBC_Project 
{
    static final String displayFormat="%-5s%-15s%-15s%-15s\n";
    public static int menu(){
        int choice=0;
        System.out.println("1. List all writing groups \n"
                + "2. List all the data for a group specified by user\n"
                + "3. List all Publishers\n"
                + "4. List all data for a publisher specified by user\n"
                + "5. List all book titles\n"
                + "6. List all the data for a single book specified by the user\n"
                + "7. Insert a new book\n"
                + "8. Insert a new publisher\n"
                + "9. Remove a single book specified by user\n"
                + "0. Exit Program");
        Scanner in=new Scanner(System.in);
        choice=in.nextInt();
        return choice;
    }
    
    
    //  Database credentials
    static String USER;
    static String PASS;
    static String DBNAME;
    //This is the specification for the printout that I'm doing:
    //each % denotes the start of a new field.
    //The - denotes left justification.
    //The number indicates how wide to make the field.
    //The "s" denotes that it's a string.  All of our output in this test are
    //strings, but that won't always be the case.
    
// JDBC driver name and database URL
    static final String JDBC_DRIVER = "org.apache.derby.jdbc.ClientDriver";
    static String DB_URL = "jdbc:derby://localhost:1527/";
//            + "testdb;user=";

    public static String dispNull (String input) {
        //because of short circuiting, if it's null, it never checks the length.
        if (input == null || input.length() == 0)
            return "N/A";
        else
            return input;
    }

    public static void main(String[] args) throws SQLException, ClassNotFoundException {
        //Prompt the user for the database name, and the credentials.
        //If your database has no credentials, you can update this code to
        //remove that from the connection string.
        Scanner in = new Scanner(System.in);
        System.out.print("Name of the database (not the user account): ");
        //DBNAME = in.nextLine();
        //DBNAME="JDBC";
        DBNAME = "JDBC_Project";
        System.out.print("Database user name: ");
        //USER = in.nextLine();
        //USER="app";
        System.out.print("Database password: ");
        //PASS = in.nextLine();
        //PASS="pass";
        //Constructing the database URL connection string
        //DB_URL = DB_URL + DBNAME + ";user="+ USER + ";password=" + PASS;
        DB_URL = DB_URL + DBNAME;
        
//        Create a simple menu to run all of the options below:
       
        
===================================== V2===================================        
        
   
            boolean searching=true;
            while(searching){
                Connection conn = null; //initialize the connection
                Statement stmt = null;  //initialize the statement that we're using
                PreparedStatement preparedStatement=null;

        
            //STEP 2: Register JDBC driver
                Class.forName("org.apache.derby.jdbc.ClientDriver");

            //STEP 3: Open a connection
                System.out.println("Connecting to database...");
                conn = DriverManager.getConnection(DB_URL);
           
                ResultSet rs=null;
                int choice=menu();
                switch (choice){
                    case 0: { System.exit(0); }
                    case 1: {
                        System.out.println("Creating statement...");
                        stmt = conn.createStatement();
                        String sql;
                        sql = "SELECT * FROM writinggroups";
                        rs = stmt.executeQuery(sql);
                           while (rs.next()) {
                                //Retrieve by column name
                                String groupname = rs.getString("groupname");
                                String headwriter = rs.getString("headwriter");
                                String yearformed = rs.getString("yearformed");
                                String subject = rs.getString("subject");
                                //Display values
                                String displayFormat1="%-25s%-25s%-25s%-25s\n";
                                System.out.printf(displayFormat1,
                                dispNull(groupname), dispNull(headwriter), dispNull(yearformed), dispNull(subject));
                            }
                        break;
                    }//done
                    //to do= input validation and action messages.

                   case 2: {
                      System.out.println("Select Group? Type Group Name");
                      String input=in.nextLine();
                      
                      String searchbygroupname = "Select * FROM writinggroups WHERE groupname=?";
                      preparedStatement = conn.prepareStatement(searchbygroupname);
                      preparedStatement.setString(1,input);
                      rs=preparedStatement.executeQuery();
                     
                      while(rs.next()){
                           String groupname = rs.getString("groupname");
                           String headwriter= rs.getString("headwriter");
                           String yearformed=String.valueOf(rs.getInt("yearformed"));
                           String subject=rs.getString("subject");
                              String displayFormat1="%-25s%-25s%-25s%-25s\n";
                              System.out.printf(displayFormat1,
                              dispNull(groupname), dispNull(headwriter), dispNull(yearformed), dispNull(subject));
                      }
                      break;
                   }//List all the data for a group specified by user//prepared statement
                    //to do= input validation and action messages.

                  case 3: {
                        System.out.println("Creating statement...");
                        stmt = conn.createStatement();
                        String sql;
                        sql = "SELECT * FROM publishers";
                        rs = stmt.executeQuery(sql);
                        while (rs.next()) {
                                //Retrieve by column name
                                String publishername = rs.getString("publishername");
                                String publisheraddress = rs.getString("publisheraddress");
                                String publisherphone = rs.getString("publisherphone");
                                String publisheremail = rs.getString("publisheremail");
                                //Display values
                                String displayFormat1="%-25s%-25s%-25s%-25s\n";
                                System.out.printf(displayFormat1,
                                dispNull(publishername), dispNull(publisheraddress), dispNull(publisherphone), dispNull(publisheremail));
                            }
                        break;//done
                    }//List all Publishers// regulare code //List all Publishers// regulare code 
                    //to do= input validation and action messages.

                    case 4: {
                        System.out.print("Enter Publisher name: ");
                        String pName = CheckInput.getString();
                        stmt = conn.createStatement();

                        String sql;
                        sql = "Select * FROM Publishers WHERE Publishers.PUBLISHERNAME = ?";
                        
                        preparedStatement = conn.prepareStatement(sql);
                        preparedStatement.setString(1,pName);
                        rs = preparedStatement.executeQuery();

                        String case4Format="%-25s%-70s%-20s%-40s\n";
                        System.out.printf(case4Format, "Publisher Name", "Publisher Address", "Publisher Phone", "Publisher Email");

                        while (rs.next())
                        {
                          String publisherName = rs.getString("publisherName");
                          String publisherAddress = rs.getString("publisherAddress");
                          String publisherPhone = rs.getString("publisherPhone");
                          String publisherEmail = rs.getString("publisherEmail");
                     
                          System.out.printf(case4Format, dispNull(publisherName), dispNull(publisherAddress), dispNull(publisherPhone), dispNull(publisherEmail));
                        }
                        //rs = stmt.executeQuery(sql);

                    }//List all data for a publisher specified by user// prepared statemen
                    //to do= input validation and action messages.

                     case 5: {
                        System.out.println("Creating statement...");
                        stmt = conn.createStatement();
                        String sql;
                        sql = "SELECT booktitle FROM books";
                        rs = stmt.executeQuery(sql);
                        while (rs.next()) {
                                //Retrieve by column name
                                String booktitle = rs.getString("booktitle");
                                //Display values
                                String displayFormat1="%-25s\n";
                                System.out.printf(displayFormat1,
                                dispNull(booktitle));
                            }
                        break;
                    }//List all book titles// regular code
                    //to do= input validation and action messages.

                   case 6: {
                      System.out.println("Select data by Book? Type Book Name");
                      String input=in.nextLine();
                      
                      String searchbygroupname = "Select * FROM Books WHERE bookTitle=?";
                      preparedStatement = conn.prepareStatement(searchbygroupname);
                      preparedStatement.setString(1,input);
                      rs=preparedStatement.executeQuery();
                     
                      while(rs.next()){
                           String bookTitle = rs.getString("bookTitle");
                           String groupname= rs.getString("groupname");
                           String publishername=rs.getString("publishername");
                           String yearpublished=String.valueOf(rs.getInt("yearpublished"));
                           String numberpages=String.valueOf(rs.getInt("numberpages"));
            
                              String displayFormat1="%-25s%-25s%-25s%-10s%-10s\n";
                              System.out.printf(displayFormat1,
                              dispNull(bookTitle), dispNull(groupname), dispNull(publishername), dispNull(yearpublished), dispNull(numberpages));
                      }
                      break;
                    }
                    //List all the data for a single book specified by the user//prepared statment
                    //to do= input validation and action messages.

                    case 7: // only works if the user inputs an exisiting writing group and publisher
                    {
                        System.out.print("Enter writing group name: ");
                        String groupName = CheckInput.getString();
                        
                        System.out.print("Enter publisher name: ");
                        String publisherName = CheckInput.getString();
                        
                        System.out.print("Enter book title: ");
                        String bookTitle = CheckInput.getString();
                        
                        System.out.print("Enter year published: ");
                        int yearPublished = CheckInput.getInt();
                        
                        System.out.print("Enter number of pages: ");
                        int numberPages = CheckInput.getInt();

                        String sql;
                        sql = "INSERT INTO Books (groupName, publisherName, bookTitle, yearPublished, numberPages) VALUES (?,?,?,?,?)";
                        
                        try
                        {
                            preparedStatement = conn.prepareStatement(sql);
                            preparedStatement.setString(1,groupName);
                            preparedStatement.setString(2,publisherName);
                            preparedStatement.setString(3,bookTitle);
                            preparedStatement.setInt(4,yearPublished);
                            preparedStatement.setInt(5,numberPages);
                            preparedStatement.execute();
                        }
                        catch (SQLException e)
                        {
                            System.out.println("Invalid input parameters, going back to menu.");
                        }
                        
                     
                        break;
                    }//Insert a new book// regular code
                    //to do= input validation and action messages.
                    case 8: {
                      System.out.println("Which Publisher would you like to add");
                      String name=in.nextLine();
                      String Address=in.nextLine();
                      int phone=in.nextInt();// check for atleast 10 numbers 
                      int email=in.nextInt();//check for @ and .com at the end 

                      String insertPublisher= "insert into publishers(publishername,publisheraddress,publisherphone,publisherEmail) values(?,?,?,?)";

                      preparedStatement = conn.prepareStatement(insertPublisher);
                      preparedStatement.setString(1,name);
                      preparedStatement.setString(2,Address);
                      preparedStatement.setInt(3,phone);
                      preparedStatement.setInt(4,email);

                      int row=preparedStatement.executeUpdate();
                      break;
                    }//Insert a new publisher// prepared statemd
                    //to do= input validation and action messages.
                    //double check outputs
                    
                    case 9: {
                      System.out.println("Which book would you like to remove");
                      String name=in.nextLine();
                      String removeBook= "delete from books where booktitle=?";
                      preparedStatement = conn.prepareStatement(removeBook);
                      preparedStatement.setString(1,name);                      
                      int row=preparedStatement.executeUpdate();
                      System.out.print(row);
                      break;
                    }//to do= input validation and action messages. [message one: item is deleted,, message 2: item is not in list, message 3: would you like to chekc list??. ]
                    case 10: {System.out.println("Goodbye");
                        System.exit(0);}//exit
                }
                try {
         
            //STEP 6: Clean-up environment
            if(rs!=null)rs.close();
            if(stmt!=null)stmt.close();
            if(preparedStatement!=null)preparedStatement.close();
            conn.close();
        } catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        
            }

            //STEP 4: Execute a query
            

            //STEP 5: Extract data from result set
            
    }//end main

}//end FirstExample}

//}//end FirstExample}

========================================== v3 ====================================================

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jdbc_project;

import java.sql.*;
import java.util.Scanner;

/**
 *
 * @author Sam
 */
public class JDBC_Project 
{
    static final String displayFormat="%-5s%-15s%-15s%-15s\n";
    public static int menu(){
        int choice=0;
        System.out.println("1. List all writing groups \n"
                + "2. List all the data for a group specified by user\n"
                + "3. List all Publishers\n"
                + "4. List all data for a publisher specified by user\n"
                + "5. List all book titles\n"
                + "6. List all the data for a single book specified by the user\n"
                + "7. Insert a new book\n"
                + "8. Insert a new publisher\n"
                + "9. Remove a single book specified by user\n"
                + "0. Exit Program");
        Scanner in=new Scanner(System.in);
        choice=in.nextInt();
        return choice;
    }
    
    
    //  Database credentials
    static String USER;
    static String PASS;
    static String DBNAME;
    //This is the specification for the printout that I'm doing:
    //each % denotes the start of a new field.
    //The - denotes left justification.
    //The number indicates how wide to make the field.
    //The "s" denotes that it's a string.  All of our output in this test are
    //strings, but that won't always be the case.
    
// JDBC driver name and database URL
    static final String JDBC_DRIVER = "org.apache.derby.jdbc.ClientDriver";
    static String DB_URL = "jdbc:derby://localhost:1527/";
//            + "testdb;user=";

    public static String dispNull (String input) {
        //because of short circuiting, if it's null, it never checks the length.
        if (input == null || input.length() == 0)
            return "N/A";
        else
            return input;
    }

    public static void main(String[] args) throws SQLException, ClassNotFoundException {
        //Prompt the user for the database name, and the credentials.
        //If your database has no credentials, you can update this code to
        //remove that from the connection string.
        Scanner in = new Scanner(System.in);
        //System.out.print("Name of the database (not the user account): ");
        //DBNAME = in.nextLine();
        //DBNAME="JDBC";
        DBNAME = "JDBC_Project";
        //System.out.print("Database user name: ");
        //USER = in.nextLine();
        //USER="app";
        //System.out.print("Database password: ");
        //PASS = in.nextLine();
        //PASS="pass";
        //Constructing the database URL connection string
        //DB_URL = DB_URL + DBNAME + ";user="+ USER + ";password=" + PASS;
        DB_URL = DB_URL + DBNAME;
        
//        Create a simple menu to run all of the options below:
       
        
        
        
   
            boolean searching=true;
            while(searching){
                Connection conn = null; //initialize the connection
                Statement stmt = null;  //initialize the statement that we're using
                PreparedStatement preparedStatement=null;

        
            //STEP 2: Register JDBC driver
                Class.forName("org.apache.derby.jdbc.ClientDriver");

            //STEP 3: Open a connection
                System.out.println("\nConnecting to database...\n");
                conn = DriverManager.getConnection(DB_URL);
           
                ResultSet rs=null;
                int choice=menu();
                switch (choice){
                    case 0: { System.exit(0); }
                    case 1: {
                        System.out.println("Creating statement...");
                        stmt = conn.createStatement();
                        String sql;
                        sql = "SELECT * FROM writinggroups";
                        rs = stmt.executeQuery(sql);
                           while (rs.next()) {
                                //Retrieve by column name
                                String groupname = rs.getString("groupname");
                                String headwriter = rs.getString("headwriter");
                                String yearformed = rs.getString("yearformed");
                                String subject = rs.getString("subject");
                                //Display values
                                String displayFormat1="%-25s%-25s%-25s%-25s\n";
                                System.out.printf(displayFormat1,
                                dispNull(groupname), dispNull(headwriter), dispNull(yearformed), dispNull(subject));
                            }
                        break;
                    }//done
                    //to do= input validation and action messages.

                   // 2. List all the data for a group specified by user
                   case 2: 
                   {
                        System.out.print("Enter the Writing Group name: ");
                        String input = CheckInput.getString();

                        String checkGroupSQL = "Select groupName FROM WritingGroups";
                        stmt = conn.createStatement();
                        rs = stmt.executeQuery(checkGroupSQL);
                        boolean match = false;

                        // Check to see if groupName matches any existing groupNames
                        while (!match) {
                            try {
                                // iterate through existing names and check for match
                                // if no match is found exception is thrown and process repeats
                                // if match found while is broken and proceed forward
                                while (rs.next()) 
                                {
                                    String group = rs.getString("groupName");
                                    if(group.equals(input))
                                    {
                                        match = true;
                                    }
                                    if (match) 
                                    {
                                        break;
                                    }
                                }
                                if(!match)
                                {
                                    throw new Exception();
                                }
                            } catch (Exception e) {
                                System.out.println("Error: Group not found. Enter valid group:");
                                input = in.nextLine();

                                checkGroupSQL = "Select groupName FROM WritingGroups";
                                stmt = conn.createStatement();
                                rs = stmt.executeQuery(checkGroupSQL);
                            }
                    }

                    //String searchbygroupname = "Select * FROM writinggroups WHERE groupname=?";
                    String searchbygroupname = "SELECT * FROM WritingGroups INNER JOIN (Books NATURAL JOIN Publishers) USING(GROUPNAME) WHERE GROUPNAME = ?";
                    preparedStatement = conn.prepareStatement(searchbygroupname);
                    preparedStatement.setString(1, input);
                    rs = preparedStatement.executeQuery();

                    String case2Format = "%-25s%-25s%-20s%-10s%-25s%-20s%-20s%-70s%-20s%-40s\n";
                    System.out.printf(case2Format, "Writing Group", "Head Writer", "Year Formed", "Subject", "Book Title",
                                      "Year Published", "Number of Pages", "Publisher Address", "Publisher Phone", "Publisher Email");

                    while (rs.next()) {
                        String groupname = rs.getString("groupname");
                        String headwriter = rs.getString("headwriter");
                        String yearformed = String.valueOf(rs.getInt("yearformed"));
                        String subject = rs.getString("subject");
                        
                        String bookTitle = rs.getString("bookTitle");
                        int yearPublished = rs.getInt("yearPublished");
                        int numberPages = rs.getInt("numberPages");
                        String publisherAddress = rs.getString("publisherAddress");
                        String publisherPhone = rs.getString("publisherPhone");
                        String publisherEmail = rs.getString("publisherEmail");
                        
                        
                        
                        System.out.printf(case2Format,
                                dispNull(groupname), dispNull(headwriter), dispNull(yearformed), dispNull(subject),
                                dispNull(bookTitle), dispNull(Integer.toString(yearPublished)), dispNull(Integer.toString(numberPages)), 
                                dispNull(publisherAddress), dispNull(publisherPhone), dispNull(publisherEmail));
                    }
                    break;
                   }//List all the data for a group specified by user//prepared statement
                    //to do= input validation and action messages.

                  case 3: {
                        System.out.println("Creating statement...");
                        stmt = conn.createStatement();
                        String sql;
                        sql = "SELECT * FROM publishers";
                        rs = stmt.executeQuery(sql);

                        String displayFormat1="%-25s%-70s%-20s%-40s\n";
                        System.out.printf(displayFormat1, "Publisher Name", "Publisher Address", "Publisher Phone", "Publisher Email");
                        while (rs.next()) {
                                //Retrieve by column name
                                String publishername = rs.getString("publishername");
                                String publisheraddress = rs.getString("publisheraddress");
                                String publisherphone = rs.getString("publisherphone");
                                String publisheremail = rs.getString("publisheremail");
                                //Display values
                                
                                System.out.printf(displayFormat1,
                                dispNull(publishername), dispNull(publisheraddress), dispNull(publisherphone), dispNull(publisheremail));
                            }
                        break;//done
                    }//List all Publishers// regulare code //List all Publishers// regulare code 
                    //to do= input validation and action messages.

                    case 4: {
                         System.out.print("Enter Publisher name: ");
                    String pName = CheckInput.getString();
                     
                    String checkPubSQL = "Select publisherName FROM publishers";
                    stmt = conn.createStatement();
                    rs = stmt.executeQuery(checkPubSQL);
                    boolean match = false;
                    
                    // Check to see if publisherName matches any existing publisherNames
                    while (!match) {
                        try {
                            // iterate through existing names and check for match
                            // if no match is found exception is thrown and process repeats
                            // if match found while is broken and proceed forward
                            while (rs.next()) {
                                String pub = rs.getString("publisherName");
                                if(pub.equals(pName))
                                    match = true;
                                if (match) {
                                    break;
                                }
                            }
                            if(!match)
                                throw new Exception();
                        } catch (Exception e) {
                            System.out.println("Error: Publisher not found. Enter valid publisher:");
                            pName = in.nextLine();

                            checkPubSQL = "Select publisherName FROM publishers";
                            stmt = conn.createStatement();
                            rs = stmt.executeQuery(checkPubSQL);
                        }
                    }
                    
                    String sql;
                    sql = "Select * FROM Publishers WHERE Publishers.PUBLISHERNAME = ?";

                    preparedStatement = conn.prepareStatement(sql);
                    preparedStatement.setString(1, pName);
                    rs = preparedStatement.executeQuery();

                    String case4Format = "%-25s%-70s%-20s%-40s\n";
                    System.out.printf(case4Format, "Publisher Name", "Publisher Address", "Publisher Phone", "Publisher Email");

                    while (rs.next()) {
                        String publisherName = rs.getString("publisherName");
                        String publisherAddress = rs.getString("publisherAddress");
                        String publisherPhone = rs.getString("publisherPhone");
                        String publisherEmail = rs.getString("publisherEmail");

                        System.out.printf(case4Format, dispNull(publisherName), dispNull(publisherAddress), dispNull(publisherPhone), dispNull(publisherEmail));
                    }
                    break;

                    }//List all data for a publisher specified by user// prepared statemen
                    //to do= input validation and action messages.

                     case 5: {
                        System.out.println("Creating statement...");
                        stmt = conn.createStatement();
                        String sql;
                        sql = "SELECT booktitle FROM books";
                        rs = stmt.executeQuery(sql);
                        while (rs.next()) {
                                //Retrieve by column name
                                String booktitle = rs.getString("booktitle");
                                //Display values
                                String displayFormat1="%-25s\n";
                                System.out.printf(displayFormat1,
                                dispNull(booktitle));
                            }
                        break;
                    }//List all book titles// regular code
                    //to do= input validation and action messages.

                   case 6: {
                      System.out.println("Select data by Book? Type Book Name");
                      String input=in.nextLine();
                      
                      String checkBookSQL = "Select bookTitle FROM Books";
                      stmt = conn.createStatement();
                      rs = stmt.executeQuery(checkBookSQL);
                      boolean match = false;
                      
                      // Check to see if bookTitle matches any existing bookTitles
                      while (!match) {
                          try {
                              // iterate through existing titles and check for match
                              // if no match is found exception is thrown and process repeats
                              // if match found while is broken and proceed forward
                              while (rs.next()) {
                                  String book = rs.getString("bookTitle");
                                  if(book.equals(input))
                                      match = true;
                                  if (match) {
                                      break;
                                  }
                              }
                              if(!match)
                                  throw new Exception();
                          } catch (Exception e) {
                              System.out.println("Error: Book title not found. Enter valid title:");
                              input = in.nextLine();
                              rs = stmt.executeQuery(checkBookSQL);
                          }
                      }

                      String searchbygroupname = "Select * FROM Books WHERE bookTitle=?";
                      preparedStatement = conn.prepareStatement(searchbygroupname);
                      preparedStatement.setString(1,input);
                      rs=preparedStatement.executeQuery();
                     
                      while(rs.next()){
                           String bookTitle = rs.getString("bookTitle");
                           String groupname= rs.getString("groupname");
                           String publishername=rs.getString("publishername");
                           String yearpublished=String.valueOf(rs.getInt("yearpublished"));
                           String numberpages=String.valueOf(rs.getInt("numberpages"));
            
                              String displayFormat1="%-25s%-25s%-25s%-10s%-10s\n";
                              System.out.printf(displayFormat1,
                              dispNull(bookTitle), dispNull(groupname), dispNull(publishername), dispNull(yearpublished), dispNull(numberpages));
                      }
                      break;
                    }
                    //List all the data for a single book specified by the user//prepared statment
                    //to do= input validation and action messages.

                    case 7: // only works if the user inputs an exisiting writing group and publisher
                    {
                        System.out.print("Enter writing group name: ");
                        String groupName = CheckInput.getString();
                        
                        System.out.print("Enter publisher name: ");
                        String publisherName = CheckInput.getString();
                        
                        System.out.print("Enter book title: ");
                        String bookTitle = CheckInput.getString();
                        
                        System.out.print("Enter year published: ");
                        int yearPublished = CheckInput.getInt();
                        
                        System.out.print("Enter number of pages: ");
                        int numberPages = CheckInput.getInt();

                        String sql;
                        sql = "INSERT INTO Books (groupName, publisherName, bookTitle, yearPublished, numberPages) VALUES (?,?,?,?,?)";
                        
                        try
                        {
                            preparedStatement = conn.prepareStatement(sql);
                            preparedStatement.setString(1,groupName);
                            preparedStatement.setString(2,publisherName);
                            preparedStatement.setString(3,bookTitle);
                            preparedStatement.setInt(4,yearPublished);
                            preparedStatement.setInt(5,numberPages);
                            preparedStatement.execute();
                        }
                        catch (SQLException e)
                        {
                            System.out.println("Invalid input parameters, going back to menu.");
                        }
                        
                     
                        break;
                    }//Insert a new book// regular code
                    //to do= input validation and action messages.
                    case 8: {
                      System.out.println("Which Publisher would you like to add");
                      String name=in.nextLine();
                      String Address=in.nextLine();
                      int phone=in.nextInt();// check for atleast 10 numbers 
                      int email=in.nextInt();//check for @ and .com at the end 

                      String insertPublisher= "insert into publishers(publishername,publisheraddress,publisherphone,publisherEmail) values(?,?,?,?)";

                      preparedStatement = conn.prepareStatement(insertPublisher);
                      preparedStatement.setString(1,name);
                      preparedStatement.setString(2,Address);
                      preparedStatement.setInt(3,phone);
                      preparedStatement.setInt(4,email);

                      int row=preparedStatement.executeUpdate();
                      break;
                    }//Insert a new publisher// prepared statemd
                    //to do= input validation and action messages.
                    //double check outputs
                    
                    case 9: {
                      System.out.println("Which book would you like to remove");
                      String name=in.nextLine();
                      String removeBook= "delete from books where booktitle=?";
                      preparedStatement = conn.prepareStatement(removeBook);
                      preparedStatement.setString(1,name);                      
                      int row=preparedStatement.executeUpdate();
                      if (row > 0) {
                        System.out.println("Selection has been deleted");
                      } else {
                        System.out.println("No deletions were made. Book not located in database." + "\nReturning to menu.");
                      }
                      break;
                    }//to do= input validation and action messages. [message one: item is deleted,, message 2: item is not in list, message 3: would you like to chekc list??. ]
                    case 10: {System.out.println("Goodbye");
                        System.exit(0);}//exit
                }
                try {
         
            //STEP 6: Clean-up environment
            if(rs!=null)rs.close();
            if(stmt!=null)stmt.close();
            if(preparedStatement!=null)preparedStatement.close();
            conn.close();
        } catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        
            }

            //STEP 4: Execute a query
            

            //STEP 5: Extract data from result set
            
    }//end main

}//end FirstExample}

//}//end FirstExample}


=================================================== v4? ==================================================

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jdbc_project;

import java.sql.*;
import java.util.Scanner;

/**
 *
 * @author Sam
 */
public class JDBC_Project 
{
    static final String displayFormat="%-5s%-15s%-15s%-15s\n";
    public static int menu(){
        int choice=0;
        System.out.println("1. List all writing groups \n"
                + "2. List all the data for a group specified by user\n"
                + "3. List all Publishers\n"
                + "4. List all data for a publisher specified by user\n"
                + "5. List all book titles\n"
                + "6. List all the data for a single book specified by the user\n"
                + "7. Insert a new book\n"
                + "8. Insert or Modify a new publisher\n"
                + "9. Remove a single book specified by user\n"
                + "0. Exit Program");
        Scanner in=new Scanner(System.in);
        choice=in.nextInt();
        return choice;
    }
    
    
    //  Database credentials
    static String USER;
    static String PASS;
    static String DBNAME;
    //This is the specification for the printout that I'm doing:
    //each % denotes the start of a new field.
    //The - denotes left justification.
    //The number indicates how wide to make the field.
    //The "s" denotes that it's a string.  All of our output in this test are
    //strings, but that won't always be the case.
    
// JDBC driver name and database URL
    static final String JDBC_DRIVER = "org.apache.derby.jdbc.ClientDriver";
    static String DB_URL = "jdbc:derby://localhost:1527/";
//            + "testdb;user=";

    public static String dispNull (String input) {
        //because of short circuiting, if it's null, it never checks the length.
        if (input == null || input.length() == 0)
            return "N/A";
        else
            return input;
    }

    public static void main(String[] args) throws SQLException, ClassNotFoundException {
        //Prompt the user for the database name, and the credentials.
        //If your database has no credentials, you can update this code to
        //remove that from the connection string.
        Scanner in = new Scanner(System.in);
        //System.out.print("Name of the database (not the user account): ");
        //DBNAME = in.nextLine();
        //DBNAME="JDBC";
        DBNAME = "JDBC_Project";
        //System.out.print("Database user name: ");
        //USER = in.nextLine();
        //USER="app";
        //System.out.print("Database password: ");
        //PASS = in.nextLine();
        //PASS="pass";
        //Constructing the database URL connection string
        //DB_URL = DB_URL + DBNAME + ";user="+ USER + ";password=" + PASS;
        DB_URL = DB_URL + DBNAME;
        
//        Create a simple menu to run all of the options below:
       
        
        
        
   
            boolean searching=true;
            while(searching){
                Connection conn = null; //initialize the connection
                Statement stmt = null;  //initialize the statement that we're using
                PreparedStatement preparedStatement=null;

        
            //STEP 2: Register JDBC driver
                Class.forName("org.apache.derby.jdbc.ClientDriver");

            //STEP 3: Open a connection
                System.out.println("\nConnecting to database...\n");
                conn = DriverManager.getConnection(DB_URL);
           
                ResultSet rs=null;
                int choice=menu();
                switch (choice){
                    case 0: { System.exit(0); }
                    case 1: {
                        System.out.println("Creating statement...");
                        stmt = conn.createStatement();
                        String sql;
                        sql = "SELECT * FROM writinggroups";
                        rs = stmt.executeQuery(sql);
                           while (rs.next()) {
                                //Retrieve by column name
                                String groupname = rs.getString("groupname");
                                String headwriter = rs.getString("headwriter");
                                String yearformed = rs.getString("yearformed");
                                String subject = rs.getString("subject");
                                //Display values
                                String displayFormat1="%-25s%-25s%-25s%-25s\n";
                                System.out.printf(displayFormat1,
                                dispNull(groupname), dispNull(headwriter), dispNull(yearformed), dispNull(subject));
                            }
                        break;
                    }//done
                    //to do= input validation and action messages.

                   // 2. List all the data for a group specified by user
                   case 2: 
                   {
                        System.out.print("Enter the Writing Group name: ");
                        String input = CheckInput.getString();

                        String checkGroupSQL = "Select groupName FROM WritingGroups";
                        stmt = conn.createStatement();
                        rs = stmt.executeQuery(checkGroupSQL);
                        boolean match = false;

                        // Check to see if groupName matches any existing groupNames
                        while (!match) {
                            try {
                                // iterate through existing names and check for match
                                // if no match is found exception is thrown and process repeats
                                // if match found while is broken and proceed forward
                                while (rs.next()) 
                                {
                                    String group = rs.getString("groupName");
                                    if(group.equals(input))
                                    {
                                        match = true;
                                    }
                                    if (match) 
                                    {
                                        break;
                                    }
                                }
                                if(!match)
                                {
                                    throw new Exception();
                                }
                            } catch (Exception e) {
                                System.out.println("Error: Group not found. Enter valid group:");
                                input = in.nextLine();

                                checkGroupSQL = "Select groupName FROM WritingGroups";
                                stmt = conn.createStatement();
                                rs = stmt.executeQuery(checkGroupSQL);
                            }
                    }

                    //String searchbygroupname = "Select * FROM writinggroups WHERE groupname=?";
                    String searchbygroupname = "SELECT * FROM WritingGroups INNER JOIN (Books NATURAL JOIN Publishers) USING(GROUPNAME) WHERE GROUPNAME = ?";
                    preparedStatement = conn.prepareStatement(searchbygroupname);
                    preparedStatement.setString(1, input);
                    rs = preparedStatement.executeQuery();

                    String case2Format = "%-25s%-25s%-20s%-10s%-25s%-20s%-20s%-25S%-65s%-20s%-40s\n";
                    System.out.printf(case2Format, "Writing Group", "Head Writer", "Year Formed", "Subject", "Book Title",
                                      "Year Published", "Number of Pages", "Publisher Name", "Publisher Address", "Publisher Phone", "Publisher Email");

                    while (rs.next()) {
                        String groupname = rs.getString("groupname");
                        String headwriter = rs.getString("headwriter");
                        String yearformed = String.valueOf(rs.getInt("yearformed"));
                        String subject = rs.getString("subject");
                        
                        String bookTitle = rs.getString("bookTitle");
                        int yearPublished = rs.getInt("yearPublished");
                        int numberPages = rs.getInt("numberPages");
                        
                        String publisherName = rs.getString("publisherName");
                        String publisherAddress = rs.getString("publisherAddress");
                        String publisherPhone = rs.getString("publisherPhone");
                        String publisherEmail = rs.getString("publisherEmail");
                        
                        
                        
                        System.out.printf(case2Format,
                                dispNull(groupname), dispNull(headwriter), dispNull(yearformed), dispNull(subject),
                                dispNull(bookTitle), dispNull(Integer.toString(yearPublished)), dispNull(Integer.toString(numberPages)), 
                                dispNull(publisherName), dispNull(publisherAddress), dispNull(publisherPhone), dispNull(publisherEmail));
                    }
                    break;
                   }//List all the data for a group specified by user//prepared statement
                    //to do= input validation and action messages.

                  case 3: {
                        System.out.println("Creating statement...");
                        stmt = conn.createStatement();
                        String sql;
                        sql = "SELECT * FROM publishers";
                        rs = stmt.executeQuery(sql);

                        String displayFormat1="%-25s%-70s%-20s%-40s\n";
                        System.out.printf(displayFormat1, "Publisher Name", "Publisher Address", "Publisher Phone", "Publisher Email");
                        while (rs.next()) {
                                //Retrieve by column name
                                String publishername = rs.getString("publishername");
                                String publisheraddress = rs.getString("publisheraddress");
                                String publisherphone = rs.getString("publisherphone");
                                String publisheremail = rs.getString("publisheremail");
                                //Display values
                                
                                System.out.printf(displayFormat1,
                                dispNull(publishername), dispNull(publisheraddress), dispNull(publisherphone), dispNull(publisheremail));
                            }
                        break;//done
                    }//List all Publishers// regulare code //List all Publishers// regulare code 
                    //to do= input validation and action messages.

                    case 4: {
                         System.out.print("Enter Publisher name: ");
                    String pName = CheckInput.getString();
                     
                    String checkPubSQL = "Select publisherName FROM publishers";
                    stmt = conn.createStatement();
                    rs = stmt.executeQuery(checkPubSQL);
                    boolean match = false;
                    
                    // Check to see if publisherName matches any existing publisherNames
                    while (!match) {
                        try {
                            // iterate through existing names and check for match
                            // if no match is found exception is thrown and process repeats
                            // if match found while is broken and proceed forward
                            while (rs.next()) {
                                String pub = rs.getString("publisherName");
                                if(pub.equals(pName))
                                    match = true;
                                if (match) {
                                    break;
                                }
                            }
                            if(!match)
                                throw new Exception();
                        } catch (Exception e) {
                            System.out.println("Error: Publisher not found. Enter valid publisher:");
                            pName = in.nextLine();

                            checkPubSQL = "Select publisherName FROM publishers";
                            stmt = conn.createStatement();
                            rs = stmt.executeQuery(checkPubSQL);
                        }
                    }
                    
                    //String sql;
                    //sql = "Select * FROM Publishers WHERE Publishers.PUBLISHERNAME = ?";
                    String sql = "SELECT * FROM Publishers INNER JOIN (Books NATURAL JOIN WritingGroups) USING(PUBLISHERNAME) " +
                                 "WHERE PUBLISHERNAME = ?";
                    
                    preparedStatement = conn.prepareStatement(sql);
                    preparedStatement.setString(1, pName);
                    rs = preparedStatement.executeQuery();

                    //String case4Format = "%-25s%-70s%-20s%-40s\n";
                    //System.out.printf(case4Format, "Publisher Name", "Publisher Address", "Publisher Phone", "Publisher Email");
                    String case4Format = "%-25s%-65s%-20s%-40s%-25s%-25s%-20s%-10s%-25s%-20s%-20s\n";
                    System.out.printf(case4Format, "Publisher Name", "Publisher Address", "Publisher Phone", "Publisher Email", 
                                      "Writing Group", "Head Writer", "Year Formed", 
                                      "Subject", "Book Title", "Year Published", "Number of Pages");
                    

                    while (rs.next()) {
                        
                        String publisherName = rs.getString("publisherName");
                        String publisherAddress = rs.getString("publisherAddress");
                        String publisherPhone = rs.getString("publisherPhone");
                        String publisherEmail = rs.getString("publisherEmail");
                        
                        String groupname = rs.getString("groupname");
                        String headwriter = rs.getString("headwriter");
                        String yearformed = String.valueOf(rs.getInt("yearformed"));
                        String subject = rs.getString("subject");
                        
                        String bookTitle = rs.getString("bookTitle");
                        int yearPublished = rs.getInt("yearPublished");
                        int numberPages = rs.getInt("numberPages");
                        
                        

                        System.out.printf(case4Format,
                                dispNull(publisherName), dispNull(publisherAddress), dispNull(publisherPhone), dispNull(publisherEmail),
                                dispNull(groupname), dispNull(headwriter), dispNull(yearformed), dispNull(subject),
                                dispNull(bookTitle), dispNull(Integer.toString(yearPublished)), dispNull(Integer.toString(numberPages))); 
                                
                    }
                    break;

                    }//List all data for a publisher specified by user// prepared statemen
                    //to do= input validation and action messages.

                     case 5: {
                        System.out.println("Creating statement...");
                        stmt = conn.createStatement();
                        String sql;
                        sql = "SELECT booktitle FROM books";
                        rs = stmt.executeQuery(sql);
                        while (rs.next()) {
                                //Retrieve by column name
                                String booktitle = rs.getString("booktitle");
                                //Display values
                                String displayFormat1="%-25s\n";
                                System.out.printf(displayFormat1,
                                dispNull(booktitle));
                            }
                        break;
                    }//List all book titles// regular code
                    //to do= input validation and action messages.

                   case 6: {
                      System.out.println("Select data by Book? Type Book Name");
                      String input=in.nextLine();
                      
                      String checkBookSQL = "Select bookTitle FROM Books";
                      stmt = conn.createStatement();
                      rs = stmt.executeQuery(checkBookSQL);
                      boolean match = false;
                      
                      // Check to see if bookTitle matches any existing bookTitles
                      while (!match) 
                      {
                          try {
                              // iterate through existing titles and check for match
                              // if no match is found exception is thrown and process repeats
                              // if match found while is broken and proceed forward
                              while (rs.next()) {
                                  String book = rs.getString("bookTitle");
                                  if(book.equals(input))
                                      match = true;
                                  if (match) {
                                      break;
                                  }
                              }
                              if(!match)
                                  throw new Exception();
                          } catch (Exception e) {
                              System.out.println("Error: Book title not found. Enter valid title:");
                              input = in.nextLine();
                              rs = stmt.executeQuery(checkBookSQL);
                          }
                      }

                      // prompts user for the second part of the full key
                      System.out.println("Enter 1(Writing Group) or 2(Publisher)");
                      String secondInput; 
                      int secondKey = CheckInput.getIntRange(1,2);
                      boolean secondMatch = false;
                      if(secondKey == 1) {
                          System.out.println("Enter: Writing group");
                          secondInput = in.nextLine();
                          
                          // get result set from designated query
                          String checkSecondKey = "SELECT groupName FROM Books NATURAL JOIN WritingGroups where bookTitle = '"
                                  + input + "' AND GroupName = ?";
                          preparedStatement = conn.prepareStatement(checkSecondKey);
                          preparedStatement.setString(1,secondInput);
                          rs = preparedStatement.executeQuery();
                          
                          // iterates through result set to find a matching group name
                          while(!secondMatch) {
                              while (rs.next()) {
                                  String group = rs.getString("groupName");
                                  if(group.equals(secondInput))
                                      secondMatch = true;
                                  if (secondMatch) {
                                      break;
                                  }
                              }
                              // returns back to menu if no match is found
                              if(!secondMatch) {
                                  System.out.println("Failed to enter valid group name. Returning to menu.");
                                  break;
                              }
                          }
                          
                          if(!secondMatch) {
                              break;
                          }
                          
                      } else {
                          System.out.println("Enter: Publisher");
                          secondInput = in.nextLine();
                          
                          // get result set from designated query
                          String checkSecondKey = "SELECT groupName FROM Books NATURAL JOIN WritingGroups where bookTitle = '"
                                  + input + "' AND publisherName = ?";
                          preparedStatement = conn.prepareStatement(checkSecondKey);
                          preparedStatement.setString(1,secondInput);
                          rs = preparedStatement.executeQuery();
                          
                          // iterates through result set to find a matching publisher
                          while(!secondMatch) {
                              while (rs.next()) {
                                  String pub = rs.getString("publisherName");
                                  if(pub.equals(secondInput))
                                      secondMatch = true;
                                  if (secondMatch) {
                                      break;
                                  }
                              }
                              
                              // returns back to menu if no match is found
                              if(!secondMatch) {
                                  System.out.println("Failed to enter valid publisher name. Returning to menu.");
                                  break;
                              }
                          }
                          
                          if(!secondMatch) {
                              break;
                          }
                      }

                      
                      String searchbybooktitle = "SELECT * FROM Books NATURAL JOIN WritingGroups NATURAL JOIN Publishers WHERE bookTitle = ?";
                      preparedStatement = conn.prepareStatement(searchbybooktitle);
                      preparedStatement.setString(1,input);
                      rs=preparedStatement.executeQuery();
                     
                      String case6Format = "%-25s%-20s%-20s%-25s%-25s%-15s%-10s%-25s%-65s%-20s%-40s\n";
                      System.out.printf(case6Format, "Book Title", "Year Published", "Number of Pages",
                              "Writing Group", "Head Writer", "Year Formed", "Subject",
                              "Publisher Name", "Publisher Address", "Publisher Phone", "Publisher Email");
                      
                      while(rs.next()){
                            String bookTitle = rs.getString("bookTitle");
                            int yearPublished = rs.getInt("yearPublished");
                            int numberPages = rs.getInt("numberPages");
                            
                            String groupname = rs.getString("groupname");
                            String headwriter = rs.getString("headwriter");
                            String yearformed = String.valueOf(rs.getInt("yearformed"));
                            String subject = rs.getString("subject");
                          
                            String publisherName = rs.getString("publisherName");
                            String publisherAddress = rs.getString("publisherAddress");
                            String publisherPhone = rs.getString("publisherPhone");
                            String publisherEmail = rs.getString("publisherEmail");

                            

                            
            
                              //String displayFormat1="%-25s%-25s%-25s%-10s%-10s\n";
                              System.out.printf(case6Format,
                                dispNull(bookTitle), dispNull(Integer.toString(yearPublished)), dispNull(Integer.toString(numberPages)), 
                                dispNull(groupname), dispNull(headwriter), dispNull(yearformed), dispNull(subject),
                                dispNull(publisherName), dispNull(publisherAddress), dispNull(publisherPhone), dispNull(publisherEmail)); 
                      }
                      break;
                    }
                    //List all the data for a single book specified by the user//prepared statment
                    //to do= input validation and action messages.

                    case 7: // only works if the user inputs an exisiting writing group and publisher
                    {
                        System.out.print("Enter writing group name: ");
                        String groupName = CheckInput.getString();
                        
                        System.out.print("Enter publisher name: ");
                        String publisherName = CheckInput.getString();
                        
                        System.out.print("Enter book title: ");
                        String bookTitle = CheckInput.getString();
                        
                        System.out.print("Enter year published: ");
                        int yearPublished = CheckInput.getInt();
                        
                        System.out.print("Enter number of pages: ");
                        int numberPages = CheckInput.getInt();

                        String sql;
                        sql = "INSERT INTO Books (groupName, publisherName, bookTitle, yearPublished, numberPages) VALUES (?,?,?,?,?)";
                        
                        try
                        {
                            preparedStatement = conn.prepareStatement(sql);
                            preparedStatement.setString(1,groupName);
                            preparedStatement.setString(2,publisherName);
                            preparedStatement.setString(3,bookTitle);
                            preparedStatement.setInt(4,yearPublished);
                            preparedStatement.setInt(5,numberPages);
                            preparedStatement.execute();
                        }
                        catch (SQLException e)
                        {
                            System.out.println("Invalid input parameters, going back to menu.");
                        }
                        
                     
                        break;
                    }//Insert a new book// regular code
                    //to do= input validation and action messages.
                    case 8: {
                      System.out.println("Which Publisher would you like to add");
                    String name = in.nextLine();
                    
                    // checks if user publisher name is already in data set
                    String checkPublisherSQL = "Select publisherName FROM Publishers";
                    stmt = conn.createStatement();
                    rs = stmt.executeQuery(checkPublisherSQL);
                    boolean foundDupe = false;
                    
                    // iterates through result set and checks for a duplicate
                    while (rs.next()) { 
                                String pub = rs.getString("publisherName");
                                if (pub.equals(name)) {
                                    System.out.println("Error: Attmempting to add dupplicate publisher. Returning to menu.");
                                    foundDupe = true;
                                    break;
                                }
                            }
                    if(foundDupe){
                        break;
                    }
                    
                    
                    System.out.println("Enter address");
                    String Address = in.nextLine();
                    System.out.println("Enter phone number");
                    String phone = in.nextLine();// check for atleast 10 numbers 
                    System.out.println("Enter email");
                    String email = in.nextLine();//check for @ and .com at the end 

                    String insertPublisher = "insert into publishers(publishername,publisheraddress,publisherphone,publisherEmail) values(?,?,?,?)";

                    preparedStatement = conn.prepareStatement(insertPublisher);
                    preparedStatement.setString(1, name);
                    preparedStatement.setString(2, Address);
                    preparedStatement.setString(3, phone);
                    preparedStatement.setString(4, email);
                    
                    System.out.println("Enter old publisher name");
                    String oldPub = in.nextLine();
                    
                    rs = stmt.executeQuery(checkPublisherSQL);
                    foundDupe = false;
                    
                    // iterates through result set and checks for a duplicate
                    while (rs.next()) { 
                                String pub = rs.getString("publisherName");
                                if (pub.equals(oldPub)) {
                                    String alterPub = "UPDATE Books SET publisherName = '" + name + "' WHERE publisherName = '" + oldPub+"'";
                                    stmt.execute(alterPub);
                                    int row = preparedStatement.executeUpdate();
                                    foundDupe = true;
                                    break;
                                }

                            }
                    if(!foundDupe){
                        System.out.println("Error: Cannot locate old publisher in data set. Returning to menu.");
                        break;
                    }
                    break;
                    }//Insert a new publisher// prepared statemd
                    //to do= input validation and action messages.
                    //double check outputs
                    
                    case 9: {
                      System.out.println("Which book would you like to remove");
                      String name=in.nextLine();
                      String removeBook= "delete from books where booktitle=?";
                      preparedStatement = conn.prepareStatement(removeBook);
                      preparedStatement.setString(1,name);                      
                      int row=preparedStatement.executeUpdate();
                      if (row > 0) {
                        System.out.println("Selection has been deleted");
                      } else {
                        System.out.println("No deletions were made. Book not located in database." + "\nReturning to menu.");
                      }
                      break;
                    }//to do= input validation and action messages. [message one: item is deleted,, message 2: item is not in list, message 3: would you like to chekc list??. ]
                    case 10: {System.out.println("Goodbye");
                        System.exit(0);}//exit
                }
                try {
         
            //STEP 6: Clean-up environment
            if(rs!=null)rs.close();
            if(stmt!=null)stmt.close();
            if(preparedStatement!=null)preparedStatement.close();
            conn.close();
        } catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        
            }

            //STEP 4: Execute a query
            

            //STEP 5: Extract data from result set
            
    }//end main

}//end FirstExample}

//}//end FirstExample}